{
  "name": "Django-rest-framework-queryset",
  "tagline": "Mimicking the Django ORM queryset so that can be used ListViews for pagination",
  "body": "[![Build Status](https://travis-ci.org/variable/django-rest-framework-queryset.svg?branch=master)](https://travis-ci.org/variable/django-rest-framework-queryset)\r\n# Django Rest Framework QuerySet\r\nMimicking the Django ORM queryset over rest framework api\r\n\r\n## Usage:\r\n\r\n### normal operation\r\n```python\r\n    from rest_framework_queryset import RestFrameworkQuerySet\r\n    from django.core.paginator import Paginator\r\n\r\n    qs = RestFrameworkQuerySet('http://localhost:8082/api/')\r\n    qs.all()\r\n\r\n    # filter\r\n    boys = qs.filter(gender='boy')\r\n    girls = qs.filter(gender='girls')\r\n\r\n    # slicing\r\n    first_100_boys = boys[:100]\r\n\r\n    # pagination\r\n    p = Paginator(qs, 10)\r\n    print p.count\r\n    print p.num_pages\r\n    page1 = p.page(1)\r\n```\r\n\r\n### class based view\r\n```python\r\nfrom django.views.generic import ListView\r\nfrom rest_framework_queryset import RestFrameworkQuerySet\r\n\r\nclass ListDataView(ListView):\r\n    paginate_by = 10\r\n    template_name = 'list.html'\r\n\r\n    def get_queryset(self, *args, **kwargs):\r\n        return RestFrameworkQuerySet('http://localhost:8082/api/').filter(**self.request.GET.dict())\r\n```\r\n\r\n## Dependencies\r\nThe queryset is dependent on the API that uses [LimiteOffsetPagination](http://www.django-rest-framework.org/api-guide/pagination/#limitoffsetpagination)\r\nIf you are using [PageNumberPagination](http://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination) then you can use the included `rest_framework_queryset.pagination.HybridPagination` which will switch pagination class depends on the query param is passed.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}